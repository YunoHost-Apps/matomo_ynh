#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_composer__2
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up Matomo before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	if [[ ! -f "$final_path/config/config.ini.php" ]]; then
		# config.ini.php is only created during the post-install process...
		# it is therefore not present when the CI tests are carried out...
		# This condition is only for CI test to go through the upgrade process
		ynh_secure_remove --file="$final_path"
		# Download, check integrity, uncompress and patch the source from app.src
		ynh_setup_source --dest_dir="$final_path"
	else
		# Create a temporary directory
		tmpdir="$(mktemp -d)"

		# Backup the config file in the temp dir
		cp -a "$final_path/config/config.ini.php" "$tmpdir/config.ini.php"

		# Remove the app directory securely
		ynh_secure_remove --file="$final_path"

		# Download, check integrity, uncompress and patch the source from app.src
		ynh_setup_source --dest_dir="$final_path"

		# Copy the admin saved settings from tmp directory to final path	
		cp -a "$tmpdir/config.ini.php" "$final_path/config/config.ini.php" 

		# Remove the tmp directory securely
		ynh_secure_remove --file="$tmpdir"
	fi
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..."

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# INSTALL COMPOSER AND DEPENDENCIES
#=================================================
ynh_script_progression --message="Installating composer and dependencies..."

ynh_install_composer --phpversion="$phpversion" --workdir="$final_path"

if [[ -f "$final_path/config/config.ini.php" ]]; then
	php$phpversion $final_path/console core:update
fi

#=================================================
# INSTALL MISSING ICONS
#=================================================

if [ ! "$(ls -A "$final_path/plugins/Morpheus/icons")" ]
then
	  ynh_script_progression --message="Installating Morpheus icons..."
    ynh_setup_source --dest_dir="$final_path/plugins/Morpheus/icons" --source_id="icons"
    chmod -R 755 "$final_path/plugins/Morpheus"
fi

#=================================================
# SETUP A CRON
#=================================================
ynh_script_progression --message="Setuping a cron..."

cp ../conf/cron /etc/cron.d/$app

ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="/etc/cron.d/$app"
ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="/etc/cron.d/$app"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="/etc/cron.d/$app"
ynh_replace_string --match_string="__PATH__" --replace_string="$path_url" --target_file="/etc/cron.d/$app"
ynh_replace_string --match_string="__PHPVERSION__" --replace_string="$phpversion" --target_file="/etc/cron.d/$app"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
chown -R $app:$app $final_path

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of Matomo completed"
